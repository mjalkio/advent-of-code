Analysis of problem copied from
https://github.com/dphilipson/advent-of-code-2021/blob/master/src/days/day24.rs

The input is a set of instructions repeated 14 times. The repetitions differ
only in three places, marked below as {DIV}, {CHECK}, and {OFFSET}:
    inp w
    mul x 0
    add x z
    mod x 26
    div z {DIV}
    add x {CHECK}
    eql x w
    eql x 0
    mul y 0
    add y 25
    mul y x
    add y 1
    mul z y
    mul y 0
    add y w
    add y {OFFSET}
    mul y x
    add z y
It is very important to notice the following characteristics:
- Each such series of instructions resets w, x, and y. Only z's value persists
  from one such grouping to the next.
- {DIV} is always either 1 or 26, determined by whether {CHECK} is positive or
  negative respectively.
- If {CHECK} is positive, it's always greater than 9.
- There are an equal number of repetitions where {CHECK} is positive as there
  are where it is negative (seven of each).
We can interpret this code as performing the following:
- Read an input.
- Check the condition: input == (z % 26) + {CHECK}.
- If {CHECK} is negative (or equivalently, {DIV} is 26), set z = z / 26.
- If the condition is met, do nothing further.
- Otherwise, set z = 26 * z + input + {OFFSET}
Note here that if {CHECK} is positive, then it is impossible for the condition
to be met, since we noticed that positive {CHECK} is always greater than 9 but
the largest possible input we can read is 9.
Because the operations on z all involve multiplying, dividing, or modding by 26,
we can think of z as being treated like a stack of "digits" in a base-26 number.
With this mental model, the above description becomes as follows:
- If {CHECK} is positive, push (input + {OFFSET}) onto the stack.
- If {CHECK} is negative, pop from the stack. If the popped value plus {CHECK}
  does not equal the input, then push (input + {OFFSET}) onto the stack.
- After all instructions have run, we are successful if the stack is empty.
There are the same number of positive and negative {CHECK}s, we have the same
number of push and pop instructions. If we want to end with an empty stack, we
can't allow any of the pops to re-push, so must be sure that the condition
(popped_value == input + {OFFSET}) is met on every single pop.
The values of {CHECK},{OFFSET} for the 14 sets in my problem input are:

13,5
15,14
15,15
11,16
-16,8
-11,9
-6,2
11,13
10,16
-10,6
-8,6
-11,9
12,11
-15,5

so translated to the mental model above, this is the following:

PUSH input[0] + 5
PUSH input[1] + 14
PUSH input[2] + 15
PUSH input[3] + 16
POP => input[4] = input[3]
POP => input[5] = input[2] + 4
POP => input[6] = input[1] + 8
PUSH input[7] + 13
PUSH input[8] + 16
POP => input[9] = input[8] + 6
POP => input[10] = input[7] + 5
POP => input[11] = input[0] - 6
PUSH input[12] + 11
POP => input[13] = input[12] - 4

Solutions follow this system of equations

input[0] = input[11] + 6
input[4] = input[3]
input[5] = input[2] + 4
input[6] = input[1] + 8
input[9] = input[8] + 6
input[10] = input[7] + 5
input[12] = input[13] + 4

Solving for smallest possible solution
0: 7
1: 1
2: 1
3: 1
4: 1
5: 5
6: 9
7: 1
8: 1
9: 7
10: 6
11: 1
12: 5
13: 1

[7,1,1,1,1,5,9,1,1,7,6,1,5,1]
71111591176151

Solving for largest possible solution
0: 9
1: 1
2: 5
3: 9
4: 9
5: 9
6: 9
7: 4
8: 3
9: 9
10: 9
11: 3
12: 9
13: 5

[9, 1, 5, 9, 9, 9, 9, 4, 3, 9, 9, 3, 9, 5]
91599994399395
